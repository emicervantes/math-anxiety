---
title: "Modeling 3"
editor: visual
author: Emi Cervantes
toc: true
date: "9-7-2023"
number-sections: true
highlight-style: pygments
format: 
  html: 
    code-fold: false
    html-math-method: katex
    fig-width: 7
    fig-height: 4
  pdf:
    toc: true
    number-sections: true
    geometry:
      - top=30mm
      - left=20mm
    fig-width: 7
    fig-height: 4
  docx: 
    fig-width: 10
    fig-height: 5
---

# Math Anxiety Modeling

We propose a new model for our project, which emphasizes the relationship between trait math anxiety and mind wandering. *Mind wandeirng* indicates a fault in information processing caused by 3 hypotheses: an individual's conscious behavior, failure of executive control, and an individual's current concerns. Furthermore, common predictors of mind wandering include learners' trait anxiety and task-value beliefs.

# Load Libraries

```{r}
library(tidyverse)
library(lavaan)
```

# Data Preparation

## Load Dataset

```{r}
df <- readxl::read_xlsx('../../../data/math-anxiety-raw-data.xlsx')
```

## Clean Dataset

We need following variables for modeling:

-   Trait math anxiety: `TMA_1`, `TMA_2`, `TMA_3`, `TMA_4`,`TMA_5`, `TMA_6`

-   Situational interest: `SI_1`, `SI_2`, `SI_3`, `SI_4`, `SI_5`, `SI_6`, `SI_7`, `SI_8`, `SI_9`, `SI_10`, `SI_11`, `SI_12`, `SI_13`, `SI_14`

-   Mind wandering:

    -   Day 1: `MW_control_1...210`, `MW_control_2...211`, `MW_control_3...212`, `MW_control_4...213`, `MW_control_5...214`, `MW_control_6`, `MW_control_7`
    -   Day 2: `MW_control_1...295`, `MW_control_2...296`, `MW_control_3...297`, `MW_control_4...298`, `MW_control_5...299`

-   Learning achievements:`Del_OverallAcc`, `Understand_avg`

-   Condition:`Condition`

-   Gender:`Sex`

-   School location: `chicago`

Create new dataset with necessary variables:

```{r}
# variable list
tma <- c("TMA_1","TMA_2","TMA_3","TMA_4","TMA_5","TMA_6", "TMA_avg")
si <- c("SI_1", "SI_2", "SI_3", "SI_4", "SI_5", "SI_6", "SI_7", "SI_8", "SI_9", "SI_10", "SI_11", "SI_12", "SI_13", "SI_14")
mw <- c("MW_control_1...210", "MW_control_2...211", "MW_control_3...212", "MW_control_4...213", "MW_control_5...214", "MW_control_6", "MW_control_7",
"MW_control_1...295", "MW_control_2...296", "MW_control_3...297", "MW_control_4...298", "MW_control_5...299")
learning_achiev <- c("Del_OverallAcc", "Understand_avg")
# select variables
df2 <- df %>% select(Condition, Sex, chicago, tma, si, mw, learning_achiev)
# rename mw variables
mw_names <- c("MW1_1", "MW1_2", "MW1_3", "MW1_4", "MW1_5", "MW1_6", "MW1_7", "MW2_1", "MW2_2", "MW2_3","MW2_4","MW2_5")
colnames(df2)[25:36] <- mw_names
```

Clean new dataset to exclude NA values, etc:

```{r}
# Get rid of row that has NA values in Condition and/or Sex
df2 <- df2 %>% filter(Condition == 1 | Condition == 2)
df2 <- df2 %>% filter(!is.na(Sex))
# assign 0 to no worked ex and 1 to worked ex
df2$Condition[df2$Condition == 2] <- 0
# Assign 0 for "boy" and 1 for "girl"
df2$Sex[df2$Sex == 1] <- 0
df2$Sex[df2$Sex == 2] <- 1
```

Check to see any NA values in TMA, MW, and SI

```{r}
# TMA
df2 %>% select(contains("tma")) %>% 
  summarise(across(everything(), ~ sum(is.na(.))))
# MW
df2 %>% select(contains("mw")) %>% 
  summarise(across(everything(), ~ sum(is.na(.))))
# SI
df2 %>% select(contains("si")) %>% 
  summarise(across(everything(), ~ sum(is.na(.))))
```

No missing data in TMA, but some data were missing in MW and SI - 7 missing data from at least each MW score from day 1

```{r}
# filter rows with NA mind wandeirng from day 1
df2 %>% select(Condition, Sex, chicago, 
               contains("MW1")) %>% 
   filter_all(any_vars(is.na(.)))
```

7 students did not fill any mind wandering questionnaire on Day 1. One student filled out 6 out of 7 mind wandering questions. Missing data will be filled out based on students' condition, gender, school location, and math anxiety scores by mean imputation method.

```{r}
# accuracy
df2 %>% select(contains("acc")) %>% 
  summarise(across(everything(), ~ sum(is.na(.))))
# perceived understanding
df2 %>% select(contains("under")) %>% 
  summarise(across(everything(), ~ sum(is.na(.))))
```

2 missing `Understand_avg` data

## Data Imputation

Data imputation is required for following variables: `MW1_1`, `MW1_2`, `MW1_3` ,`MW1_4` ,`MW1_5` ,`MW1_6`,`MW1_7`, `MW2_5`, `SI_6`, `Understand_avg`

Mean imputation method is used based on following variables: `Condition`, `Sex`, `chicago`, `TMA`. `TMA` is a new variable which assigns LOW for low `TMA_avg` scores (1-3) and HIGH for high TMA scores (4,5).

```{r}
# make new variable HIGH
df3 <- df2 %>% mutate(TMA = case_when(
  TMA_avg < 4 ~ 0,
  TMA_avg >= 4 ~ 1
))
# create a dataset with average values
df_avg <- df3 %>% group_by(Condition, Sex, chicago, TMA) %>% 
  summarise(MW1_1 = mean(MW1_1, na.rm = TRUE),
            MW1_2 = mean(MW1_2, na.rm = TRUE),
            MW1_3 = mean(MW1_3, na.rm = TRUE),
            MW1_4 = mean(MW1_4, na.rm = TRUE),
            MW1_5 = mean(MW1_5, na.rm = TRUE),
            MW1_6 = mean(MW1_6, na.rm = TRUE),
            MW1_7 = mean(MW1_7, na.rm = TRUE),
            MW2_5 = mean(MW2_5, na.rm = TRUE),
            SI_6 = mean(SI_6, na.rm = TRUE),
            SI_10 = mean(SI_10, na.rm = TRUE),
            under = mean(Understand_avg, na.rm = TRUE))
head(df_avg)
```

Filling missing data:

```{r}
# filling missing values for MW day 1
for (i in 1:nrow(df3)){
  # get condition values
  cond <- df3$Condition[i]
  sex <- df3$Sex[i]
  location <- df3$chicago[i]
  tma <- df3$TMA[i]
  # fill in missing values for mw
  for (j in 25:31){
    if (is.na(df3[i,j]) == TRUE) {
      df3[i,j] <- 
        df_avg[df_avg$Condition == cond & 
                 df_avg$Sex == sex &
                 df_avg$chicago == location &
                 df_avg$TMA == tma, j-20] 
    }
  }
}
# fill. in missing values for MW day 2
i <- which(is.na(df2$MW2_5))
cond <- df3$Condition[i]
sex <- df3$Sex[i]
location <- df3$chicago[i]
tma <- df3$TMA[i]
df3[i,36] <- df_avg[df_avg$Condition == cond & 
                 df_avg$Sex == sex &
                 df_avg$chicago == location &
                 df_avg$TMA == tma, 12] 
# fill in missing values for SI
for (i in 1:nrow(df3)){
  # get condition values
  cond <- df3$Condition[i]
  sex <- df3$Sex[i]
  location <- df3$chicago[i]
  tma <- df3$TMA[i]
  # fill in missing values for mw
  for (j in c(16,20)){
    if (is.na(df3[i,j]) == TRUE) {
      k <- 13
      df3[i,j] <- 
        df_avg[df_avg$Condition == cond & 
                 df_avg$Sex == sex &
                 df_avg$chicago == location &
                 df_avg$TMA == tma, k] 
      k <- 14
    }
  }
}
# fill in missing values for perceived understanding
for (i in 1:nrow(df3)){
  # get condition values
  cond <- df3$Condition[i]
  sex <- df3$Sex[i]
  location <- df3$chicago[i]
  tma <- df3$TMA[i]
  # fill in missing values for mw
  if (is.na(df3[i,38]) == TRUE) {
      df3[i,38] <- 
        df_avg[df_avg$Condition == cond & 
                 df_avg$Sex == sex &
                 df_avg$chicago == location &
                 df_avg$TMA == tma, 15] 
  }
}
```

```{r}
# save dataset
write.csv(df3, file = "../../../data/df_imputed.csv")
```


# Modeling

We will be using structural equation model to do a multigroup confirmatory factor analysis (MGCFA). Confirmatory factor analysis (CFA) is a multivariate procedure that is used to test how well the measured variables represent the number of constructs.Moreover, it is used to test whether measures of construct are consistent with a researcher's understanding of the nature of that construct.

## Proposed Model

In our model, we have three latent variables: `TMA`, `SI`, and `MW`. Each latent variable has exogenous observed variables:

-   `TMA`: `TMA_1`, `TMA_2`, `TMA_3`, `TMA_4`,`TMA_5`, `TMA_6`

-   `SI`: `SI_1`, `SI_2`, `SI_3`, `SI_4`, `SI_5`, `SI_6`, `SI_7`, `SI_8`, `SI_9`, `SI_10`, `SI_11`, `SI_12`, `SI_13`, `SI_14`

-   `MW`: `MW1_1`, `MW1_2`, `MW1_3`, `MW1_4`, `MW1_5`, `MW1_6`, `MW1_7`

## Structural Equation Models

**Latent Variable Models**

`TMA` \~ `TMA_1`+`TMA_2`+`TMA_3`+`TMA_4`+`TMA_5`+`TMA_6`

`SI` \~ `SI_1`+`SI_2`+`SI_3`+`SI_4`+`SI_5`+`SI_6`+`SI_7`+`SI_8`+`SI_9`+`SI_10`+`SI_11`+`SI_12`+`SI_13`+`SI_14`

`MW` \~ `MW1_1`+`MW1_2`+`MW1_3`+`MW1_4`+`MW1_5`+`MW1_6`+`MW1_7`'

**Regression Models**

Exogenous Variables:

`SI` \~ `TMA`

`MW` \~ `TMA` + `SI`

Endogenous Variable (Learning achievements):

Learning Achievements \~ `TMA` + `MW`

*Where learning achievement is either post test accuracy scores or perceived understanding scores*

## Multigroup Analysis

We are interested in seeing differences in the paths between girls and boys. The data will be split into worked example and no worked example group, and we will examine the gender difference in each subgroup.

```{r}
# split data to worked ex and no worked ex groups
# worked ex group
df_we = df3 %>% filter(Condition == 1)
# no worked ex group
df_nwe = df3 %>% filter(Condition == 0)
```

```{r}
# model definition
m <- '
# measurement model
tma =~ TMA_1 + TMA_2 + TMA_3 + TMA_4 + TMA_5 + TMA_6
si =~ SI_1 + SI_2 + SI_3 + SI_4 + SI_5 + SI_6 + SI_7 + SI_8 + SI_9 + SI_10 + SI_11 + SI_12 + SI_13 + SI_14
mw =~ MW1_1 + MW1_2 + MW1_3 + MW1_4 + MW1_5 + MW1_6 + MW1_7
# regressions
mw ~ 1 + tma + si
Del_OverallAcc ~ 1 + tma + mw
'
```

## Worked EX Group

```{r}
# fit the model (group by gender)
fit1_we <- sem(m, data = df_we, 
            std.lv = T, group = "Sex")
fit2_we <- sem(m, data = df_we, group = "Sex",
            group.equal = "loadings")
fit3_we <- sem(m, data = df_we, group = "Sex",
            group.equal = c("intercepts", "loadings"))
# display summary
summary(fit1_we, fit.measures = T, standardized = T)
summary(fit2_we, fit.measures = T, standardized = T)
summary(fit3_we, fit.measures = T, standardized = T)
# invariance check
lavTestLRT(fit1_we, fit2_we, fit3_we)
```

## No Worked EX Group

```{r}
# fit the model (group by gender)
fit1_nwe <- sem(m, data = df_nwe, 
            std.lv = T, group = "Sex")
fit2_nwe <- sem(m, data = df_nwe, group = "Sex",
            group.equal = "loadings")
fit3_nwe <- sem(m, data = df_nwe, group = "Sex",
            group.equal = c("intercepts", "loadings"))
# display summary
summary(fit1_nwe, fit.measures = T, standardized = T)
summary(fit2_nwe, fit.measures = T, standardized = T)
summary(fit3_nwe, fit.measures = T, standardized = T)
# invariance check
lavTestLRT(fit1_nwe, fit2_nwe, fit3_nwe)
```

## Looking at Different Site

We will be running the same analysis, but to both Chicago and Irvine as we saw from the initial EDA that Chicago and Irvine students have significant difference in their previous knowledge in ratio.

```{r}
# split data to Chicago, Irvine
# worked ex data
## Chicago
df_we_c = df_we %>% filter(chicago == 1)
## Irvine
df_we_i = df_we %>% filter(chicago == 0)
# no worked ex data
## Chicago
df_nwe_c = df_nwe %>% filter(chicago == 1)
## Irvine
df_nwe_i = df_nwe %>% filter(chicago == 0)
```

### Worked EX Group

#### Chicago

```{r}
# fit the model (group by gender)
fit1_we_c <- sem(m, data = df_we_c, group = "Sex")
fit2_we_c <- sem(m, data = df_we_c, group = "Sex",
            group.equal = "loadings")
fit3_we_c <- sem(m, data = df_we_c, group = "Sex",
            group.equal = c("intercepts", "loadings"))
# display summary
summary(fit1_we_c, fit.measures = T, standardized = T)
summary(fit2_we_c, fit.measures = T, standardized = T)
summary(fit3_we_c, fit.measures = T, standardized = T)
# invariance check
lavTestLRT(fit1_we_c, fit2_we_c, fit3_we_c)
```

#### Irvine

```{r}
# fit the model (group by gender)
fit1_we_i <- sem(m, data = df_we_i, 
            std.lv = T, group = "Sex")
fit2_we_i <- sem(m, data = df_we_i, group = "Sex",
            group.equal = "loadings")
fit3_we_i <- sem(m, data = df_we_i, group = "Sex",
            group.equal = c("intercepts", "loadings"))
# display summary
summary(fit1_we_i, fit.measures = T, standardized = T)
summary(fit2_we_i, fit.measures = T, standardized = T)
summary(fit3_we_i, fit.measures = T, standardized = T)
# invariance check
lavTestLRT(fit1_we_i, fit2_we_i, fit3_we_i)
```

### No Worked EX Group

#### Chicago

```{r}
# fit the model (group by gender)
fit1_nwe_c <- sem(m, data = df_nwe_c, 
            std.lv = T, group = "Sex")
fit2_nwe_c <- sem(m, data = df_nwe_c, group = "Sex",
            group.equal = "loadings")
fit3_nwe_c <- sem(m, data = df_nwe_c, group = "Sex",
            group.equal = c("intercepts", "loadings"))
# display summary
summary(fit1_nwe_c, fit.measures = T, standardized = T)
summary(fit2_nwe_c, fit.measures = T, standardized = T)
summary(fit3_nwe_c, fit.measures = T, standardized = T)
# invariance check
lavTestLRT(fit1_nwe_c, fit2_nwe_c, fit3_nwe_c)
```

#### Irvine

```{r}
# fit the model (group by gender)
fit1_nwe_i <- sem(m, data = df_nwe_i, 
            std.lv = T, group = "Sex")
fit2_nwe_i <- sem(m, data = df_nwe_i, 
            std.lv = T, group = "Sex",
            group.equal = "loadings")
fit3_nwe_i <- sem(m, data = df_nwe_i, group = "Sex",
            group.equal = c("intercepts", "loadings"))
# display summary
summary(fit1_nwe_i, fit.measures = T, standardized = T)
summary(fit2_nwe_i, fit.measures = T, standardized = T)
summary(fit3_nwe_i, fit.measures = T, standardized = T)
# invariance check
lavTestLRT(fit1_nwe_i, fit2_nwe_i, fit3_nwe_i)
```
